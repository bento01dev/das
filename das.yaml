apiVersion: v1
kind: Namespace
metadata:
  labels:
    kubernetes.io/metadata.name: das
  name: das
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: das
rules:
- apiGroups:
  - ""
  resources:
  - pods
  - deployments
  - replicasets
  - daemonsets
  verbs:
  - get
  - list
  - watch
  - update
  - patch
- apiGroups:
  - "apps"
  resources:
  - deployments
  - replicasets
  - daemonsets
  verbs:
  - get
  - list
  - watch
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
- apiGroups:
  - "coordination.k8s.io"
  resources:
  - "leases"
  verbs:
  - get
  - list
  - watch
  - create
  - update
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: das
  namespace: das
automountServiceAccountToken: true
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: das
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: das
subjects:
- kind: ServiceAccount
  name: das
  namespace: das
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: das
  namespace: das
data:
  config.json: |
    {
      "sidecars": {
          "test-sidecar": {
            "err_codes": [
              0
            ],
            "owner": "Deployment",
            "steps": [
              {
                "name": "test-step-1",
                "restart_limit": 5,
                "cpu_request": "1",
                "cpu_limit": "1",
                "mem_request": "1Gi",
                "mem_limit": "1Gi"
              },
              {
                "name": "test-step-2",
                "restart_limit": 5,
                "cpu_request": "2",
                "cpu_limit": "2",
                "mem_request": "3Gi",
                "mem_limit": "3Gi"
              }
            ],
          "cpu_annotation_key": "test-sidecar/cpu",
          "cpu_limit_annotation_key": "test-sidecar/cpuLimit",
          "mem_annotation_key": "test-sidecar/mem",
          "mem_limit_annotation_key": "test-sidecar/memLimit"
        }
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: das
  namespace: das
  labels:
    app.kubernetes.io/name: das
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: das
  template:
    metadata:
      labels:
        app.kubernetes.io/name: das
    spec:
      serviceAccountName: das
      containers:
      - name: das
        image: das:0.48
        command: ["/das", "--config_file", "/config/config.json"]
        env:
          - name: LOG_LEVEL
            value: info
          - name: STORAGE_TYPE
            value: s3
          - name: AWS_ENDPOINT
            value: http://172.18.0.2:31566
          - name: S3_BUCKET
            value: das
          - name: AWS_ACCESS_KEY_ID
            value: test
          - name: AWS_SECRET_ACCESS_KEY
            value: test
          - name: AWS_REGION
            value: us-east-1
        resources:
          limits:
            cpu: "1"
            memory: 1Gi
          requests:
            cpu: "1"
            memory: 1Gi
        volumeMounts:
        - name: config-volume
          mountPath: /config
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
      volumes:
      - name: config-volume
        configMap:
          name: das
